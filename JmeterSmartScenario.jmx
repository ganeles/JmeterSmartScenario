<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Глобальные параметры_MaxPerf" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="profile" elementType="Argument">
            <stringProp name="Argument.name">profile</stringProp>
            <stringProp name="Argument.value">c:/jmeter/profile.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Файл с профилем. в пути использовать обратные слеши (/), без кавычек!!!</stringProp>
          </elementProp>
          <elementProp name="baseline_rampup" elementType="Argument">
            <stringProp name="Argument.name">baseline_rampup</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">Время разгона на первую ступень теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_percent" elementType="Argument">
            <stringProp name="Argument.name">baseline_percent</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Процент от профиля на первой ступени теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_duration" elementType="Argument">
            <stringProp name="Argument.name">baseline_duration</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.desc">Длительность первой ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_rampup" elementType="Argument">
            <stringProp name="Argument.name">step_rampup</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">Время разгона на вторую (и следующие) ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_percent" elementType="Argument">
            <stringProp name="Argument.name">step_percent</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.desc">Процент от профиля, добавляющийся на второй (и следующих) ступенях теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_duration" elementType="Argument">
            <stringProp name="Argument.name">step_duration</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">Длительность второй и следующих ступеней теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LG_Slow" elementType="Argument">
            <stringProp name="Argument.name">LG_Slow</stringProp>
            <stringProp name="Argument.value">loadgenerator.domain.local</stringProp>
            <stringProp name="Argument.desc">Имя нагрузочной станции для низкоинтенсивных скриптов</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Глобальные параметры_Stub" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="profile" elementType="Argument">
            <stringProp name="Argument.name">profile</stringProp>
            <stringProp name="Argument.value">c:/jmeter/profile.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Файл с профилем. Если указываете полный путь к файлу-используйте прямой слеш (/), без кавычек</stringProp>
          </elementProp>
          <elementProp name="baseline_rampup" elementType="Argument">
            <stringProp name="Argument.name">baseline_rampup</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">Время разгона на первую ступень теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_percent" elementType="Argument">
            <stringProp name="Argument.name">baseline_percent</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Процент от профиля на первой ступени теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_duration" elementType="Argument">
            <stringProp name="Argument.name">baseline_duration</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.desc">Длительность первой ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_rampup" elementType="Argument">
            <stringProp name="Argument.name">step_rampup</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Время разгона на вторую (и следующие) ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_percent" elementType="Argument">
            <stringProp name="Argument.name">step_percent</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Процент от профиля, добавляющийся на второй (и следующих) ступенях теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_duration" elementType="Argument">
            <stringProp name="Argument.name">step_duration</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">Длительность второй и следующих ступеней теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LG_Slow" elementType="Argument">
            <stringProp name="Argument.name">LG_Slow</stringProp>
            <stringProp name="Argument.value">loadgenerator.domain.local</stringProp>
            <stringProp name="Argument.desc">Имя нагрузочной станции для низкоинтенсивных скриптов</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Глобальные параметры_ConsoleRun" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="profile" elementType="Argument">
            <stringProp name="Argument.name">profile</stringProp>
            <stringProp name="Argument.value">c:/jmeter/profile.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Файл с профилем. в пути использовать обратные слеши (/), без кавычек!!!</stringProp>
          </elementProp>
          <elementProp name="baseline_rampup" elementType="Argument">
            <stringProp name="Argument.name">baseline_rampup</stringProp>
            <stringProp name="Argument.value">${__P(baseline_rampup,)}</stringProp>
            <stringProp name="Argument.desc">Время разгона на первую ступень теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_percent" elementType="Argument">
            <stringProp name="Argument.name">baseline_percent</stringProp>
            <stringProp name="Argument.value">${__P(baseline_percent,)}</stringProp>
            <stringProp name="Argument.desc">Процент от профиля на первой ступени теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseline_duration" elementType="Argument">
            <stringProp name="Argument.name">baseline_duration</stringProp>
            <stringProp name="Argument.value">${__P(baseline_duration,)}</stringProp>
            <stringProp name="Argument.desc">Длительность первой ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_rampup" elementType="Argument">
            <stringProp name="Argument.name">step_rampup</stringProp>
            <stringProp name="Argument.value">${__P(step_rampup,)}</stringProp>
            <stringProp name="Argument.desc">Время разгона на вторую (и следующие) ступени теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_percent" elementType="Argument">
            <stringProp name="Argument.name">step_percent</stringProp>
            <stringProp name="Argument.value">${__P(step_percent,)}</stringProp>
            <stringProp name="Argument.desc">Процент от профиля, добавляющийся на второй (и следующих) ступенях теста</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step_duration" elementType="Argument">
            <stringProp name="Argument.name">step_duration</stringProp>
            <stringProp name="Argument.value">${__P(step_duration,)}</stringProp>
            <stringProp name="Argument.desc">Длительность второй и следующих ступеней теста (сек)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LG_Slow" elementType="Argument">
            <stringProp name="Argument.name">LG_Slow</stringProp>
            <stringProp name="Argument.value">loadgenerator.domain.local</stringProp>
            <stringProp name="Argument.desc">Имя нагрузочной станции для низкоинтенсивных скриптов</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">StartTime ${__groovy(def StartTime = new Date(Long.valueOf(vars.get(&quot;TESTSTART.MS&quot;))).format(&quot;yyyy-MM-dd HH:mm&quot;).toString();return StartTime,)}, Baseline ${baseline_percent}%, Step ${step_percent}%</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">^_.+</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">${__machineName()}, scenario ${__groovy(import org.apache.jmeter.services.FileServer; def scriptName = FileServer.getFileServer().getScriptName(); return scriptName,)},${baseline_rampup} sec rampup, StartTime ${__groovy(def StartTime = new Date(Long.valueOf(vars.get(&quot;TESTSTART.MS&quot;))).format(&quot;yyyy-MM-dd hh:mm&quot;).toString();return StartTime,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">scenario ${__groovy(import org.apache.jmeter.services.FileServer; def scriptName = FileServer.getFileServer().getScriptName(); return scriptName,)},${baseline_rampup} sec rampup, StartTime ${__groovy(def StartTime = new Date(Long.valueOf(vars.get(&quot;TESTSTART.MS&quot;))).format(&quot;yyyy-MM-dd hh:mm&quot;).toString();return StartTime,)}, Baseline ${baseline_percent}%, Step ${step_percent}%</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Only in GUI mode" enabled="true">
          <stringProp name="IfController.condition">!${__isPropDefined(java.awt.headless)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ZZZ_ClearAll" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.gui.GuiPackage;
import org.apache.jmeter.gui.JMeterGUIComponent;
import org.apache.jmeter.gui.tree.JMeterTreeNode;
import org.apache.jmeter.samplers.Clearable;

 
log.info(&quot;Clearing All ...&quot;);
 
guiPackage = GuiPackage.getInstance();
 
guiPackage.getMainFrame().clearData();
for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {
    JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());
    if (guiComp instanceof Clearable){
        Clearable item = (Clearable) guiComp;
        try {
            item.clearData();
        } catch (Exception ex) {
            log.error(&quot;Can&apos;t clear: &quot;+node+&quot; &quot;+guiComp, ex);
        }
    }
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - сalc_test_param" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def names = []
def iterations = []
def minPacing = []
def loadGeneratorsNumber = []

def step_start = []
def step_finish = []



steps = 7
k = 0
String profile = vars.get(&quot;profile&quot;);
String file = new File(profile).eachLine() {line, lineNum -&gt;

       if(lineNum == 1) {
            return
        }


	log.info(&quot;LINE:&quot; + line.toString());

	var0 = &quot;&quot;
	i = 0
	
	while(line[i] != &apos;,&apos;) {
		var0 += line[i]
		++i
	}
	++i
	names[k] = var0
	var0 = &quot;&quot;
	while(line[i] != &apos;,&apos;) {
		var0 += line[i]
		++i
	}
	++i
	iterations[k] = var0.toInteger()
	var0 = &quot;&quot;
	while(line[i] != &apos;,&apos;) {
		var0 += line[i]
		++i
	}
	++i
	minPacing[k] = Double.parseDouble(var0)
	var0 = &quot;&quot;
	while(i != line.size()) {
		var0 += line[i]
		++i
	}
	loadGeneratorsNumber[k] = var0.toInteger()
	log.info(&quot;LGNUMBERS:&quot; + loadGeneratorsNumber[k].toString());
	++k
}
 // обнуляем проперти
props.put(&quot;baseline_rampup&quot;,&quot;0&quot;);
props.put(&quot;baseline_duration&quot;,&quot;0&quot;);
props.put(&quot;step_rampup&quot;,&quot;0&quot;);
props.put(&quot;step_duration&quot;,&quot;0&quot;);
props.put(&quot;lg_slow&quot;,&quot;0&quot;);
props.put(&quot;test_lenght&quot;, &quot;0&quot;);
props.put(&quot;step_start0&quot;, &quot;0&quot;);
props.put(&quot;step_finish0&quot;, &quot;0&quot;);
props.put (&quot;step1_duration_in_min&quot;, &quot;0&quot;);
props.put (&quot;step2-7_duration_in_min&quot;, &quot;0&quot;);
props.put(&quot;currentStepNumber&quot;,&quot;0&quot;)

for (i = 0; i &lt; names.size(); i++){
	var1 = names[i] + &quot;_start&quot;
	props.put(var1, &quot;0&quot;)
	
	var2 = names[i] + &quot;_add_thread&quot;
	props.put(var2, &quot;0&quot;)
	
	var3 = names[i] + &quot;_throughtput&quot;
	props.put(var3, &quot;0&quot;)

	var4 = names[i] + &quot;_load_generators&quot;
	props.put(var4, &quot;0&quot;)

	props.put(names[i] + &quot;_baseline&quot;, &quot;0&quot;)
}
	
for (i = 1; i &lt;= steps; ++i) {
	z = steps - i + 1;
	var4 = z + &quot;_length&quot;	
	props.put(var4, &quot;0&quot;)

	var5 = i + &quot;_init_delay&quot;	
	props.put(var5, &quot;0&quot;)
	
	if(i!=steps){
	props.put(&quot;step_start&quot;+i, &quot;0&quot;);
	props.put(&quot;step_finish&quot;+i, &quot;0&quot;);	
	}
}
	

//расчет ступеней
baseline_rampup = vars.get(&quot;baseline_rampup&quot;) as int
baseline_percent = Double.parseDouble(vars.get(&quot;baseline_percent&quot;))/100
baseline_duration = vars.get(&quot;baseline_duration&quot;) as int

if(vars.get(&quot;step_rampup&quot;).equals(&quot;&quot;)){
	vars.put(&quot;step_rampup&quot;, &quot;0&quot;);	
}
if(vars.get(&quot;step_percent&quot;).equals(&quot;&quot;)){	
	vars.put(&quot;step_percent&quot;, &quot;0&quot;)
}
if(vars.get(&quot;step_duration&quot;).equals(&quot;&quot;)){
	vars.put(&quot;step_duration&quot;, &quot;0&quot;)
}

step_rampup = vars.get(&quot;step_rampup&quot;) as int
step_percent = Double.parseDouble(vars.get(&quot;step_percent&quot;))/100
step_duration = vars.get(&quot;step_duration&quot;) as int
lg_slow= vars.get(&quot;lg_slow&quot;) as String

props.put(&quot;baseline_rampup&quot;,String.valueOf(baseline_rampup));
props.put(&quot;baseline_duration&quot;,String.valueOf(baseline_duration));
props.put(&quot;step_rampup&quot;,String.valueOf(step_rampup));
props.put(&quot;step_duration&quot;,String.valueOf(step_duration));
props.put(&quot;lg_slow&quot;,String.valueOf(lg_slow));


for (i = 0; i &lt; names.size(); ++i){

	if (step_percent == 0)
		minStepLoad = iterations[i] * baseline_percent / loadGeneratorsNumber[i]
	else
		minStepLoad = iterations[i] * step_percent / loadGeneratorsNumber[i]
	oneUserLoadGeneration = 3600 / minPacing[i]
	minStepVUNumber = (Math.ceil(minStepLoad / oneUserLoadGeneration)).toInteger()
	oneVUOperationsNumber = minStepLoad / minStepVUNumber
	
	oneVUOperationsPerMinNumber = oneVUOperationsNumber / 60

	if (step_percent == 0)
		baseLineVUNumber = minStepVUNumber.toInteger()
	else
		baseLineVUNumber = (minStepVUNumber * (baseline_percent / step_percent)).toInteger()

	log.info(&quot;===========================\n\n\n&quot;);
	log.info(&quot;threadGroup [&quot; + i + &quot;] - &quot; + names[i])								//имя тредгруппы
	log.info(&quot;iterations [&quot; + i + &quot;] - &quot; + iterations[i])							//операций в час
	log.info(&quot;loadGeneratorsNumber [&quot; + i + &quot;] - &quot; + loadGeneratorsNumber[i])		//на какое количество LG делится нагрузка
	log.info(&quot;step_percent [&quot; + i + &quot;] - &quot; + step_percent)						//процент профиля на ступеньках теста
	log.info(&quot;minStepLoad [&quot; + i + &quot;] - &quot; + minStepLoad)							//сколько операций/час добавляется на ступеньках
	log.info(&quot;oneUserLoadGeneration [&quot; + i + &quot;] - &quot; + oneUserLoadGeneration)		//один поток выдаёт операций/час
	log.info(&quot;minStepVUNumber [&quot; + i + &quot;] - &quot; + minStepVUNumber)					//количество потоков добавляется на ступеньке
	log.info(&quot;oneVUOperationsPerMinNumber [&quot; + i + &quot;] - &quot; + oneVUOperationsPerMinNumber)	//один поток выдаёт операций/минуту
	log.info(&quot;baseLineVUNumber [&quot; + i + &quot;] - &quot; + baseLineVUNumber)				//количество потоков на первой ступеньке теста
	log.info(&quot;\n\n\n&quot;)
	
		
	var1 = names[i] + &quot;_start&quot;
	props.put(var1, String.valueOf(baseLineVUNumber))
	
	var2 = names[i] + &quot;_add_thread&quot;
	props.put(var2, String.valueOf(minStepVUNumber))
	
	var3 = names[i] + &quot;_throughtput&quot;
	props.put(var3, String.valueOf(oneVUOperationsPerMinNumber))

	var4 = names[i] + &quot;_load_generators&quot;
	props.put(var4, String.valueOf(loadGeneratorsNumber[i]))

	props.put(names[i] + &quot;_baseline&quot;, String.valueOf(iterations[i]))
}

all_length = baseline_duration + (step_rampup + step_duration) * (steps - 1)
props.put(&quot;test_lenght&quot;, (all_length * 1000).toString());
for (i = 1; i &lt;= steps; ++i) {
	z = steps - i + 1;
	var4 = z + &quot;_length&quot;
	if (i == 7)
		l = all_length
	else
		l = all_length - (step_rampup + step_duration) * (steps - i - 1) - step_rampup - baseline_duration
	props.put(var4, String.valueOf(l))

	var5 = i + &quot;_init_delay&quot;
	if (i == 1)
		ind = 0
	else if (i == 2)
		ind = baseline_rampup + baseline_duration
	else {
		n = i-1
		m = n + &quot;_init_delay&quot;
		k = props.get(m) as int
		ind = k + step_duration + step_rampup
	}
	props.put(var5, String.valueOf(ind))
}
//получение границ ступенек
startTestTime = props.get(&quot;TESTSTART.MS&quot;) as Long
step_start[0] = baseline_rampup;
step_finish[0] = baseline_rampup + baseline_duration;

props.put(&quot;step_start0&quot;, (new Date(step_start[0] * 1000 + startTestTime).format(&quot;yyyy-MM-dd HH:mm:ss&quot;)));
props.put(&quot;step_finish0&quot;, (new Date(step_finish[0] * 1000 + startTestTime).format(&quot;yyyy-MM-dd HH:mm:ss&quot;)));

//получаем длительность ступеней
props.put (&quot;step1_duration_in_min&quot;, new Date(baseline_duration * 1000 - (3 * 3600000)).format(&quot;HH:mm:ss&quot;) );
props.put (&quot;step2-7_duration_in_min&quot;, new Date(step_duration * 1000 - (3 * 3600000)).format(&quot;HH:mm:ss&quot;) );

log.info(&quot;Начало ступени 0 &quot;  + props.get(&quot;step_start0&quot;));
log.info(&quot;Конец ступени 0 &quot; + props.get(&quot;step_finish0&quot;));

for (i = 1; i &lt; 7; ++i)
{
	step_start[i] = step_finish[i-1] + step_rampup ;	
	step_finish[i] = step_start[i] + step_duration; 
	props.put(&quot;step_start&quot;+i, (new Date(step_start[i] * 1000 + startTestTime).format(&quot;yyyy-MM-dd HH:mm:ss&quot;)));
	props.put(&quot;step_finish&quot;+i, (new Date(step_finish[i] * 1000 + startTestTime ).format(&quot;yyyy-MM-dd HH:mm:ss&quot;)));
	log.info(&quot;Начало ступени &quot; + i + &quot; - &quot; + props.get(&quot;step_start&quot;+i));
	log.info(&quot;Конец ступени &quot; + i + &quot; - &quot; + props.get(&quot;step_finish&quot;+i));	
}

log.info(&quot;===========================\n\n\n&quot;);

currentTime = System.currentTimeMillis()
a = (startTestTime - currentTime) / 1000
for (int i = 1; i &lt; 8; ++i){
	start = props.get(i+&quot;_init_delay&quot;) as int
	if (i == 7){
		props.put(&quot;currentStepNumber&quot;,String.valueOf(i))
		break
	}
	k = i + 1
	finish = props.get(k+&quot;_init_delay&quot;) as int
	if (a &gt;= start &amp;&amp; a &lt;= finish){
		props.put(&quot;currentStepNumber&quot;,String.valueOf(i))
		break
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="uc_01_Login (низкоинтенсивный - работает только на LG_Slow)" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="517427972">
            <stringProp name="772905175">${__property(uc_01_Login_start)}</stringProp>
            <stringProp name="-1134362062">${__property(1_init_delay)}</stringProp>
            <stringProp name="-1797686081">${__property(baseline_rampup)}</stringProp>
            <stringProp name="491479044">${__property(1_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1943511580">
            <stringProp name="-1095843845">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="-1639920687">${__property(2_init_delay)}</stringProp>
            <stringProp name="2025747992">${__property(step_rampup)}</stringProp>
            <stringProp name="294965539">${__property(2_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1633423153">
            <stringProp name="546953605">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="-2145479312">${__property(3_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="98452034">${__property(3_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1875906255">
            <stringProp name="546953605">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="1643929359">${__property(4_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-98061471">${__property(4_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-273202894">
            <stringProp name="546953605">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="1138370734">${__property(5_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-294574976">${__property(5_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-531212851">
            <stringProp name="546953605">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="632812109">${__property(6_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-491088481">${__property(6_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1161916819">
            <stringProp name="546953605">${__property(uc_01_Login_add_thread)}</stringProp>
            <stringProp name="127253484">${__property(7_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-687601986">${__property(7_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="RandomPause (чтобы много потоков не начинали работу в один момент)" enabled="false"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">30000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Низкоинтенсивный скрипт (только на LG_Slow)" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
              <stringProp name="1682135305">Низкоинтенсивный скрипт (только на LG_Slow)</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <stringProp name="throughput">${__property(uc_01_Login_throughtput)}</stringProp>
            <intProp name="calcMode">0</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="_UC01_Вход в систему" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="uc_02_Payment (высокоинтенсивный - работает всюду, кроме LG_Slow)" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-188597756">
            <stringProp name="1087348750">${__property(uc_02_Payment_start)}</stringProp>
            <stringProp name="-1134362062">${__property(1_init_delay)}</stringProp>
            <stringProp name="431741095">${__property(baseline_rampup)}</stringProp>
            <stringProp name="491479044">${__property(1_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-374272964">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="-1639920687">${__property(2_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="294965539">${__property(2_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="648408522">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="-2145479312">${__property(3_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="98452034">${__property(3_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="405925420">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="1643929359">${__property(4_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-98061471">${__property(4_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="2008628781">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="1138370734">${__property(5_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-294574976">${__property(5_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1750618824">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="632812109">${__property(6_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-491088481">${__property(6_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-851218802">
            <stringProp name="41394980">${__property(uc_02_Payment_add_thread)}</stringProp>
            <stringProp name="127253484">${__property(7_init_delay)}</stringProp>
            <stringProp name="983425095">${__property(step_rampup)}</stringProp>
            <stringProp name="-687601986">${__property(7_length)}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="RandomPause (чтобы много потоков не начинали работу в один момент)" enabled="false"/>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">30000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Высокоинтенсивный скрипт (только на LG_Slow)" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="170071582">Test Fragment</stringProp>
              <stringProp name="-1014822281">Высокоинтенсивный скрипт (на всех LG, кроме LG_Slow)</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <stringProp name="throughput">${__property(uc_02_Payment_throughtput)}</stringProp>
            <intProp name="calcMode">0</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="_UC02_Платёж" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Низкоинтенсивный скрипт (только на LG_Slow)" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Only in Distributed Mode" enabled="true">
            <stringProp name="IfController.condition">${__isPropDefined(__jm.D_TG)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_LG_name" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__machineName(this_lg)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//получаем параметры через свойства JSR223-семплера (выше есть область &quot;Parameters passet to script)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="вырубаем треды на быстрых генераторах" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;this_lg&quot;) != props.get(&quot;lg_slow&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LG is ${this_lg} " enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">1=1</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LG is ${__machineName} ___ TG is ${__BeanShell(ctx.getThreadGroup().getName())} " enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">1=1</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Высокоинтенсивный скрипт (на всех LG, кроме LG_Slow)" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Only in Distributed Mode" enabled="true">
            <stringProp name="IfController.condition">${__isPropDefined(__jm.D_TG)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get_LG_name" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__machineName(this_lg)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//получаем параметры через свойства JSR223-семплера (выше есть область &quot;Parameters passet to script)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="вырубаем треды на LG8" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;this_lg&quot;) == props.get(&quot;lg_slow&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">2</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LG is ${this_lg} " enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">1=1</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LG is ${__machineName} ___ TG is ${__BeanShell(ctx.getThreadGroup().getName())} " enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">1=1</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
